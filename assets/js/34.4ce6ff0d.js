(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{314:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"必要性与工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#必要性与工作原理"}},[t._v("#")]),t._v(" 必要性与工作原理")]),t._v(" "),s("p",[t._v("软件开发过程，通过文件备份方式管理代码版本，十分不便，使用版本控制工具进行管理")]),t._v(" "),s("h1",{attrs:{id:"版本控制工具-git-与-svn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本控制工具-git-与-svn"}},[t._v("#")]),t._v(" 版本控制工具 git 与 svn")]),t._v(" "),s("ul",[s("li",[t._v("git：分布式版本控制工具。备份、记录、回滚、共享、团协")]),t._v(" "),s("li",[t._v("svn：集中式版本控制工具,所有版本所有项目放在一个服务器中")]),t._v(" "),s("li",[t._v("gitee、github：基于 git，分布式版本控制+集中式管理版本项目的仓库，不仅可以分布式互相共享版本，分支合并检验")])]),t._v(" "),s("h2",{attrs:{id:"git-缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-缺点"}},[t._v("#")]),t._v(" git 缺点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("git 使用分布式模型，意味着没有一个中央处理器来保存权威数据，每一个开发人员都拥有代码和所有历史记录的完整副本，当项目较大时，会导致存储库越来越大")])]),t._v(" "),s("li",[s("p",[t._v("git 操作本地库时执行非常快，但使用远程库时，其限制就明显：存储库的更改基于的版本需要完全一致，才能允许提交，每次提交之前必须从远程仓库获取到所有的更新。其他版本管理工具只需要更新当前修改的文件而不需要全部更新")])]),t._v(" "),s("li",[s("p",[t._v("没有一次只更新一个文件或几个文件的能力")])]),t._v(" "),s("li",[s("p",[t._v("git 默认针对于本地存储库进行工作，无法及时知道远程仓库已经被做了哪些修改，git 只能对文本文件进行合并，二进制文件无法合并只能替换，无法及时了解远程仓库状态，只有将本地仓库和远程仓库合并时才能发现冲突")])]),t._v(" "),s("li",[s("p",[t._v("访问控制，对于每一个用户其某个目录某个文件的访问权限")])]),t._v(" "),s("li",[s("p",[t._v("git 作为一个命令行工具，对初学者和非程序人员不友好")])])]),t._v(" "),s("h1",{attrs:{id:"git-使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-使用"}},[t._v("#")]),t._v(" git 使用")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#初始化")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 克隆远程仓库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone url\n")])])]),s("h2",{attrs:{id:"创建-git-仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-git-仓库"}},[t._v("#")]),t._v(" 创建 git 仓库")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git init")]),t._v("命令使用一个已经存在的目录作为 git 仓库，在一个指定目录执行该命令后就生成了一个新的 git 仓库，然后就可以使用其他 git 命令来管理跟踪代码变更并与远程仓库交互")])]),t._v(" "),s("h3",{attrs:{id:"git-版本追溯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-版本追溯"}},[t._v("#")]),t._v(" git 版本追溯")]),t._v(" "),s("p",[t._v("在 github 或 gitee 上查看历次提交的记录及对应的版本号，而本地则可以使用如下命令进行版本回溯")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--hard")]),t._v(" 版本号\n")])])]),s("h3",{attrs:{id:"git-推送三部曲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-推送三部曲"}},[t._v("#")]),t._v(" git 推送三部曲")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将工作区代码都上传到暂存区")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'一些描述性内容'")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 讲暂存区内容提交到分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin 分支名      //提交到远程仓库\n")])])]),s("h3",{attrs:{id:"git-拉取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-拉取"}},[t._v("#")]),t._v(" git 拉取")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin 分支名\n")])])]),s("h2",{attrs:{id:"git-分支管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-分支管理"}},[t._v("#")]),t._v(" git 分支管理")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch 分支名称         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout 分支名称       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#切换分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin 分支名称:分支名称        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#本地分支同步到远程分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge 分支名称          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将分支合并到master")]),t._v("\n")])])]),s("ul",[s("li",[t._v("执行 git init 时，会默认创建一个 master 分支")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有分支")]),t._v("\n  develop\n* master    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# *表示当前分支，")]),t._v("\n")])])]),s("ul",[s("li",[t._v("使用 branch 创建新分支后，本地的 git 仓库也会分为 master 和若干子分支，使用 checkout 进行分支切换，对应文件夹里的内容也会发生改变")]),t._v(" "),s("li",[t._v("实际开发中经常使用至少三个分支，由于要保证 master 分支始终为稳定的版本，除了 develop 和 master 分支外，其他分支的代码要先合并到 develop 分支中，当 develop 分支中的代码没有问题后再合并到 master")])]),t._v(" "),s("h1",{attrs:{id:"git-日常使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-日常使用"}},[t._v("#")]),t._v(" git 日常使用")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取远程仓库内容以进行同步")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 上传文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'本次修改的描述'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);